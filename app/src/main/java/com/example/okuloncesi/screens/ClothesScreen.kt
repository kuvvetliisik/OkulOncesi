package com.example.okuloncesi.screens

import android.speech.tts.TextToSpeech
import androidx.compose.animation.core.Animatable
import androidx.compose.animation.core.tween
import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.pager.HorizontalPager
import androidx.compose.foundation.pager.rememberPagerState
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.foundation.Image
import androidx.compose.ui.res.painterResource
import com.example.okuloncesi.R
import java.util.*

data class ClothingModel(
    val name: String,
    val description: String,
    val imageRes: Int,         // üñºÔ∏è G√∂rsel kaynaƒüƒ±
    val backgroundColor: Color
)
@OptIn(ExperimentalFoundationApi::class)
@Composable
fun ClothesScreen() {
    val context = LocalContext.current
    var tts by remember { mutableStateOf<TextToSpeech?>(null) }

    val clothes = listOf(
        ClothingModel("Ti≈ü√∂rt", "Bu bir ti≈ü√∂rtt√ºr. Sƒ±cak havalarda giyilir.", R.drawable.tshirt, Color(0xFFFFCDD2)),
        ClothingModel("≈ûapka", "Bu bir ≈üapkadƒ±r. Ba≈üƒ±mƒ±za takarƒ±z.", R.drawable.hat, Color(0xFFFFCDD2)),
        ClothingModel("Elbise", "Bu bir elbisedir. Renkli ve g√ºzeldir.", R.drawable.skirt, Color(0xFFFFCDD2)),
        ClothingModel("Ceket", "Bu bir cekettir. Soƒüukta bizi ƒ±sƒ±tƒ±r.", R.drawable.jacket, Color(0xFFFFCDD2)),
        ClothingModel("Ayakkabƒ±", "Bu bir ayakkabƒ±dƒ±r. Ayaklarƒ±mƒ±zƒ± korur.", R.drawable.socks, Color(0xFFFFCDD2)),
        ClothingModel("Ti≈ü√∂rt", "Bu bir ti≈ü√∂rtt√ºr. Sƒ±cak havalarda giyilir.", R.drawable.jacket, Color(0xFFFFCDD2)),
        ClothingModel("≈ûapka", "Bu bir ≈üapkadƒ±r. Ba≈üƒ±mƒ±za takarƒ±z.", R.drawable.hoodie, Color(0xFFFFCDD2)),
        ClothingModel("Elbise", "Bu bir elbisedir. Renkli ve g√ºzeldir.", R.drawable.jumper, Color(0xFFFFCDD2)),
        ClothingModel("Ceket", "Bu bir cekettir. Soƒüukta bizi ƒ±sƒ±tƒ±r.", R.drawable.jeans, Color(0xFFFFCDD2)),
        ClothingModel("Ayakkabƒ±", "Bu bir ayakkabƒ±dƒ±r. Ayaklarƒ±mƒ±zƒ± korur.", R.drawable.sneaker, Color(0xFFFFCDD2)),
    )

    val pagerState = rememberPagerState { clothes.size }
    val currentItem = clothes.getOrNull(pagerState.currentPage)

    // TTS ba≈ülat
    LaunchedEffect(Unit) {
        tts = TextToSpeech(context) {
            if (it == TextToSpeech.SUCCESS) {
                tts?.language = Locale("tr", "TR")
            }
        }
    }

    // Sayfa deƒüi≈üince TTS durdur
    LaunchedEffect(pagerState.currentPage) {
        tts?.stop()
    }

    // Ekrandan √ßƒ±kƒ±nca TTS kapat
    DisposableEffect(Unit) {
        onDispose {
            tts?.stop()
            tts?.shutdown()
        }
    }

    HorizontalPager(state = pagerState) { page ->
        val item = clothes[page]
        var isClicked by remember { mutableStateOf(false) }

        // üéûÔ∏è Saƒüa-sola salƒ±nƒ±m animasyonu
        val offsetX = remember { Animatable(0f) }
        LaunchedEffect(item) {
            offsetX.snapTo(0f)
            repeat(1) {
                offsetX.animateTo(20f, animationSpec = tween(250))
                offsetX.animateTo(-20f, animationSpec = tween(250))
            }
            offsetX.animateTo(0f, animationSpec = tween(300)) // Ortaya d√∂n
        }

        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(item.backgroundColor)
                .padding(16.dp),
            contentAlignment = Alignment.Center
        ) {
            Column(horizontalAlignment = Alignment.CenterHorizontally) {
                Text(
                    text = item.name,
                    fontSize = 36.sp,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier
                        .padding(bottom = 16.dp)
                        .clickable {
                            val utteranceId = UUID.randomUUID().toString()
                            tts?.speak(item.description, TextToSpeech.QUEUE_FLUSH, null, utteranceId)
                        }
                )

                // üñºÔ∏è G√∂rsel + Animasyonlu hareket
                Image(
                    painter = painterResource(id = item.imageRes),
                    contentDescription = item.name,
                    modifier = Modifier
                        .size(250.dp)
                        .offset(x = offsetX.value.dp) // üåÄ Salƒ±nƒ±m
                        .clickable {
                            val utteranceId = UUID.randomUUID().toString()
                            tts?.speak(item.description, TextToSpeech.QUEUE_FLUSH, null, utteranceId)
                        }
                )
            }
        }
    }
}

